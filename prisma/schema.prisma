generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Customer {
  id                 String       @id @default(auto()) @map("_id") @db.ObjectId
  customerType       CustomerType
  firstName          String
  lastName           String
  phone              String       @unique
  gender             String
  maxCreditLimit     Float
  maxCreditDays      Int
  unpaidCreditAmount Int?         @default(0)
  taxPin             String?
  dob                String?
  email              String?      @unique
  nationalID         String?      @unique
  sales              Sale[]
  country            String
  location           String
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
}

enum CustomerType {
  RETAIL
  WHOLESALE
  DISTRIBUTOR
  OTHER
}

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  email            String    @unique
  username         String    @unique
  password         String
  firstName        String
  lastName         String
  phone            String    @unique
  dob              DateTime?
  gender           Gender
  image            String?
  role             Role      @default(ATTENDANT)
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  shops            Shop[]
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  ADMIN
  ATTENDANT
}

model Shop {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  slug         String    @unique
  location     String
  adminId      String    @db.ObjectId
  products     Product[]
  sales        Sale[]
  admin        User      @relation(fields: [adminId], references: [id])
  attendantIds String[]  @db.ObjectId
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Supplier {
  id                 String       @id @default(auto()) @map("_id") @db.ObjectId
  supplierType       SupplierType
  name               String
  contactPerson      String
  phone              String       @unique
  email              String?      @unique
  location           String
  country            String
  website            String?
  taxPin             String?
  registrationNumber String?      @unique
  bankAccountNumber  String?
  paymentTerms       String?
  logo               String       @default("https://placehold.co/100x100")
  rating             Float?
  notes              String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  Product            Product[]
}

enum SupplierType {
  MANUFACTURER
  DISTRIBUTOR
  WHOLESALER
  RETAILER
  OTHER
}

model Unit {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  abbreviation String
  slug         String    @unique
  products     Product[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Brand {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  Description    String?
  batchNumber    String?
  barCode        String?    @unique
  image          String?    @default("https://placehold.co/100x100")
  tax            Int?
  alertQty       Int
  stockQty       Int
  price          Int
  wholesalePrice Int        @default(0)
  buyingPrice    Int?
  sku            String     @unique
  productCode    String     @unique
  slug           String     @unique
  supplierId     String     @db.ObjectId
  unitId         String     @db.ObjectId
  shopId         String     @default("66d87eaf0434c8c6565673c7") @db.ObjectId
  brandId        String     @db.ObjectId
  categoryId     String     @db.ObjectId
  expiryDate     DateTime   @default("2025-12-31T23:59:59Z")
  unit           Unit       @relation(fields: [unitId], references: [id])
  shop           Shop       @relation(fields: [shopId], references: [id])
  brand          Brand      @relation(fields: [brandId], references: [id])
  category       Category   @relation(fields: [categoryId], references: [id])
  supplier       Supplier   @relation(fields: [supplierId], references: [id])
  saleItems      SaleItem[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

enum SaleType {
  PAID
  CREDIT
}

enum PaymentMethod {
  CASH
  MOBILEMONEY
}

model Sale {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  customerId      String        @db.ObjectId
  customerName    String
  saleNumber      String        @unique
  customerEmail   String?
  saleAmount      Int
  balanceAmount   Int?          @default(0)
  paidAmount      Int
  orderType       String?
  saleType        SaleType      @default(PAID)
  paymentMethod   PaymentMethod @default(CASH)
  transactionCode String?
  shopId          String        @db.ObjectId
  shop            Shop          @relation(fields: [shopId], references: [id])
  salesItems      SaleItem[]
  customer        Customer      @relation(fields: [customerId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model SaleItem {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  saleId       String   @db.ObjectId
  productId    String   @db.ObjectId
  qty          Int
  productPrice Float
  productName  String
  productImage String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  product      Product  @relation(fields: [productId], references: [id])
  sale         Sale     @relation(fields: [saleId], references: [id])
}
